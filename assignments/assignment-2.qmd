---
title: "Assignment 2"

format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

# Analysis of Turkish Movies (IMBD)

***Movies are filtered and URL's are saved***

```{r}
# searches between  01/01/2010-31/12/2023
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250" 

# searches before 31/12/2009
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"

combined_url <- c(url_1, url_2)
```

***Necessary packages are imported***

```{r,  message=FALSE, results='asis', warning=FALSE}
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(ggthemes)
```

***Web-Scrapping***

Turkish movies with have minimum 2500 vote are filtered.

```{r}

title <- c()
release_year <- c()
duration <- c()
rating <- c()
vote <- c()
for (url in combined_url) {
  Html <- read_html(url)
  
  title_names <- Html |> html_nodes('.ipc-title__text')
  title_names <- html_text(title_names)
  title_names <- tail(head(title_names,-1),-1)
  title_names <- str_split(title_names, " ", n=2)
  title_names <- unlist(lapply(title_names, function(x) {x[2]}))
  title <- append(title,title_names)
  
  years <- Html |> html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata')
  years <- html_text(years)
  years <- unlist(lapply(years, function(years){
           strtrim(years, 4)}))
  release_year <- append(release_year, as.numeric(years))
  
  durations <- Html |> html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata')
  durations <- html_text(durations)
  durations <- unlist(lapply(durations, function(durations){
           str_extract(durations, "\\d+h( \\d+m)?|\\d+m|\\d+") |> str_extract("(?<=^.{4}).*")}))
  convert_to_minutes <- function(duration) {
  hours <- as.numeric(str_extract(duration, "\\d+(?=h)"))
  minutes <- as.numeric(str_extract(duration, "\\d+(?=m)"))
  total_minutes <- ifelse(is.na(hours),0, hours) * 60 + ifelse(is.na(minutes), 0, minutes)
  return(total_minutes)
}
  durations <- unlist(lapply(durations, convert_to_minutes))
  duration  <- append(duration, durations)
  
  ratings <- Html |> html_nodes(".sc-43986a27-1.fVmjht")
  ratings <- html_text(ratings)
  ratings <- unlist(lapply(ratings, function(ratings){
    str_sub(ratings, 1, 3)
  }))
  rating <- append(rating, as.numeric(ratings))
  
  votes <- Html |> html_nodes(".sc-53c98e73-0.kRnqtn")
  votes <- html_text(votes)
  extract_numeric <- function(string) {
  numeric_part <- str_extract(string, "\\d[0-9,]+")
  numeric_value <- as.numeric(gsub(",", "", numeric_part))
  return(numeric_value)
}
  votes <- unlist(lapply(votes, extract_numeric))
  vote  <- append(vote, votes)
}
movies  <- data.frame(title, release_year, duration, rating,vote)

head(movies)

```

Above, you can see the dataframe generated by scrapping the data from web.

**a) Arranged by Rating**

*pre-processing*

```{r}

movies <- movies %>% 
  arrange(desc(rating)) %>%
  mutate(ranking = c(1: length(title))) %>%
  select(ranking, everything())
  
```

*Head*

Top 5 movies based on user ratings are shown below.

```{r}

head(movies, n = 5L) %>% select(title, rating, vote, release_year)

```

I don't think there is someone haven't watched one of these movies yet. I guess everybody would agree upon these 5. There are many great actors/actresses that make us laugh even today. The second one is actually not a movie though.

*Tail*

The bottom 5 is shown below.

```{r}

tail(movies, n = 5L) %>% select(title, rating, vote)
```

Judging a movie before watching it is not appropriate. So, I have no comments about these movies.

**b)** **My Favorite Ones**

My favorite 3 movies, their rankings and ratings are listed below.

```{r}

movies %>% 
  filter(title == "Dag II" | title == "A.R.O.G" | title == "Kurtlar Vadisi: Gladio")
```

**c) Visualization**

Yearly rating averages are visualized below. You can see that rating averages are decreasing as getting closer to today. However, one need consider the number of movies released since it is directly related with the rating averages.

```{r}

movies %>% 
  group_by(release_year) %>%
  summarize(yearly_average = mean(rating)) %>%
  ggplot(aes(x = release_year, y = yearly_average)) + geom_point() +
  ggtitle("Yearly Rating Averages") + theme_pander()

```

Below you can see that number of movies released are generally increased over the years.

```{r}

movies %>%
  group_by(release_year) %>%
  summarize(movie_number = n()) %>%
  ggplot(aes(x = release_year, y = movie_number)) + geom_point() + ggtitle("Number of Movies Over the Year") + theme_pander()

```

*Box Plot*

```{r}


movies %>%
  ggplot(aes(x = as.factor(release_year), y = rating)) +
  geom_boxplot() +
  theme_pander() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+ 
  xlab("release_year")
```

After 2003 number of movies increased dramatically and results relatively lower ratings.

*Vote vs Rating*

```{r}

movies %>%
  ggplot(aes(x = vote, rating)) + geom_point() + theme_pander()+
  ggtitle("Vote vs Rating")
  
```

Most of the votes within the range of 0 and 15000. In this range there is accumulation above 5.0 rating. As the number of votes increases rating is generally high. However further investigation with larger dataset is required.

*Duration vs Rating*

```{r}

movies %>%
  ggplot(aes(x = duration, rating)) + geom_point() + theme_pander()+
  ggtitle("Duration vs Rating")
```

Duration of the movies are accumulated between roughly 75-130 minutes. However in this range we can see both high and low ratings. Hence, there is not clear relationship between duration and rating.

**Turkish Movies in IMDB Top 1000**

*Web-Scrapping*

```{r}

knitr::opts_chunk$set(warning = FALSE)

url <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"

Html_ <- read_html(url)

title_top <- Html_ |> html_nodes('.ipc-title__text')
title_top <- html_text(title_top)
title_top <- tail(head(title_top,-1),-1)
title_top <- str_split(title_top, " ", n=2)
title_top <- unlist(lapply(title_top, function(x) {x[2]}))


release_year_top <- c()
release_years <- Html_ |> html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
release_years <- html_text(release_years)
release_years  <- unlist(lapply(release_years, function(release_years){
           strtrim(release_years, 4)}))
release_year_top <- append(release_year_top, as.numeric(release_years))
                          
movies_top <- data_frame(title_top, release_year_top)

```

*Joining with the original table*

```{r}

left_join(movies_top, movies, by = c("title_top" = "title")) %>%
  select(-release_year_top) %>% select(ranking, everything()) %>%
  arrange(desc(rating))
```

The ranking shows the actual place of these movies in the *movies* dataset. Although they are in the top 1000 list of IMDB, they are not at the top of first dataframe. Hence, we can say that IMDB has some other parameters to order the movies in its top 1000 lists. These parameters can be awards they took, tickets sold etc.
