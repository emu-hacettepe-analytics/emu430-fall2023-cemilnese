---
title: "Assignment 1"
---

My first assignment has three parts.

## (a)

# Save an ocean of time: streamline data wrangling with R

The video is about how automating repetitive tasks can save substantial amount of time by improving workflow and reducing errors. The speaker talks about operations of a small company located in Nova Scotia, Canada. This company is focusing and analyzing of coast and ocean parameters such as temperature, dissolved oxygen in water etc. to post them online for the use of other companies. There are some kind of sensor systems at certain points under the ocean surface and these sensor generating huge amount of data every minutes to every hour. Before the speaker started to work for this company, people had been handling these dataset manually and as she is mentioning in the video it consumes as much as ocean amount of time. Even though, she have not had any experience with data wrapping and manipulation before, studies and coding done by her made huge impact on companies effectiveness. Once again she improved the idea of practicing makes things perfect. Meanwhile, she also learnt error handling and prevention methods and integrated these techniques to the package she coded. I believe that the most important part of coding is starting and the rest would follow.

## (b)

# Basic differences between Python and R

**1. Data Structures and Indexing:**

R Example:

```{r}
# Creating a vector in R
my_vector <- c(1, 2, 3, 4, 5)
# Accessing the third element (index 3) in R
third_element <- my_vector[3]
```

Python Example:

```{p}
# Creating a list in Python
my_list = [1, 2, 3, 4, 5]
# Accessing the third element (index 2) in Python
third_element = my_list[2]

```

In R, data frames and matrices are commonly used for data manipulation. R uses 1-based indexing, meaning the first element is accessed with index 1. In Python, pandas DataFrames and NumPy arrays are commonly used. Python uses 0-based indexing, so the first element is accessed with index 0.

**2. Function Syntax and Style:**

R Example:

```{r}
# Defining a custom function in R
square <- function(x) {
    return(x * x)
}

# Calling the custom function
result <- square(5)

```

Python Example:

```{p}
# Defining a custom function in Python
def square(x):
    return x * x

# Calling the custom function
result = square(5)

```

In this example, we demonstrate the syntax and style differences in defining and calling custom functions. In R, functions are defined using the **function** keyword, and function arguments are enclosed in **parentheses**. In Python, functions are defined using the **def** keyword, and the function arguments are specified in the **parentheses** as well. The function body in R is enclosed in curly braces **{}**, whereas Python uses *indentation* to define the function block.

**3. Programming Paradigms**

In Python, you can use object-oriented programming (OOP) principles to create and manipulate objects with methods and attributes. Python's core data structure, the list, is an example of an object that can be extended with methods.

```{p}
# Example of object-oriented programming in Python
class MyClass:
    def __init__(self, value):
        self.value = value

    def display(self):
        print("Value:", self.value)

obj = MyClass(42)
obj.display()

```

In R, the language is more vector-oriented. It's designed to perform operations on entire vectors or data frames at once, without explicit loops. This is a characteristic feature of R and is facilitated by its vectorized functions.

```{r}
# Example of vector-oriented programming in R
vector <- c(1, 2, 3, 4, 5)
result <- vector * 2  # Multiply each element by 2
print(result)


```

In this R example, the operation is applied to the entire vector at once, which is a common approach in R for data manipulation.

So, the key difference here is that Python provides strong support for object-oriented programming, making it well-suited for creating and managing objects, while R's vector-oriented paradigm is designed for efficient and concise data manipulation operations on entire vectors or data frames.

## (c)

**Content of na_example:**

```{r}
library(dslabs)
data(na_example)

print(na_example)

```

**Total number of NAs:**

```{r}
paste("Total number of NAs in na_example is",sum(is.na(na_example)))

```

**Replaced NAs with 0:**

```{r}
na_example[is.na(na_example)] <- 0
new_data_set <- na_example 
new_data_set

```

**Total number of NAs in new_data_set:**

```{r}
paste("Total number of NAs in new data frame is", sum(is.na(new_data_set)))

```
